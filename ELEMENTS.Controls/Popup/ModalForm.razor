

    <button type="button" class="btn btn-primary"
            data-bs-toggle="modal" 
            data-bs-target="@( "#modal_" + modalGUID.ToString() )">
        @Title
    </button>

    <!-- Modal -->
    <div class="@FormCSS" id="@( "modal_" + modalGUID.ToString() )" tabindex="-1" 
         aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="@( ModalCSS + " " + SetSize() )">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">@Title</h5>
                    <button type="button" class="btn-close" 
                            data-bs-dismiss="modal" aria-label="Close"
                            @onclick="closeclick"></button>
                </div>
                <div class="modal-body" style="min-height:570px;">
                    @ChildContent
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="cancelclick">@CancelTitle</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="okclick">@OKTitle</button>
                </div>
            </div>
        </div>
    </div>


@code {

    private Guid modalGUID = Guid.NewGuid();

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string FormCSS { get; set; } = "modal fade"; // modal modal-blur fade

    [Parameter]
    public string ModalCSS { get; set; } = "modal-dialog modal-dialog-centered modal-dialog-scrollable";

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<string> OnOKClicked { get; set; }

    private void okclick()
    {
        try
        {
            OnOKClicked.InvokeAsync("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [Parameter]
    public EventCallback<string> OnCancelClicked { get; set; }

    private void cancelclick()
    {
        try
        {
            OnCancelClicked.InvokeAsync("Cancel");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [Parameter]
    public EventCallback<string> OnCloseClicked { get; set; }

    private void closeclick()
    {
        try
        {
            OnCloseClicked.InvokeAsync("Close");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [Parameter]
    public string OKTitle { get; set; } = "OK";

    [Parameter]
    public string CancelTitle { get; set; } = "Cancel";

    [Parameter]
    public ModalFormSize Size { get; set; } = ModalFormSize.Large;

    private string SetSize()
    {
        if (Size == ModalFormSize.Small)
        { return "modal-sm"; }
        else if (Size == ModalFormSize.Large)
        { return "modal-lg"; }
        else if (Size == ModalFormSize.Extra)
        { return "modal-xl"; }
        else
        {
            return "";
        }
    }

}
