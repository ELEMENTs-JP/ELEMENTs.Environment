@inject NavigationManager nm


    <div class="card card-md">
        <div class="card-body" >

            <h2 class="card-title text-center mb-4">@FormTitle</h2>
            
            <div class="mb-3">
                <label class="form-label">@PasswordLabel</label>
                <div class="input-group input-group-flat">
                    <input type="password" class="@ControlCSS" placeholder="@PasswordPlaceholder" 
                            @onchange="@( e => { Pwd = e.Value.ToSecureString(); })" autocomplete="off">
                    <span class="input-group-text bg-white">
                        <i class="fas fa-key"></i>
                    </span>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">@PasswordRepeatLabel</label>
                <div class="input-group input-group-flat">
                    <input type="password" class="@ControlCSS" placeholder="@PasswordRepeatPlaceholder" 
                            @onchange="@( e => { PwdRepeat = e.Value.ToSecureString(); })" autocomplete="off">
                    <span class="input-group-text bg-white">
                        <i class="fas fa-key"></i>
                    </span>
                </div>
            </div>


            <div class="form-footer">
                <button type="button" class="@ButtonCSS" @onclick="click">@RequestNewPasswordButtonLabel</button>
            </div>
        </div>
    </div>


@code {

  
    [Parameter]
    public string ControlCSS { get; set; } = "form-control";

    [Parameter]
    public string ButtonCSS { get; set; } = "btn btn-primary w-100";


    // Form
    [Parameter]
    public string FormTitle { get; set; } = "Change password";


    // Password
    [Parameter]
    public string PasswordLabel { get; set; } = "Password";

    [Parameter]
    public string PasswordPlaceholder { get; set; } = "Enter password";

    // Password
    [Parameter]
    public string PasswordRepeatLabel { get; set; } = "Password";

    [Parameter]
    public string PasswordRepeatPlaceholder { get; set; } = "Repeat password";

    // Sign Int
    [Parameter]
    public string RequestNewPasswordButtonLabel { get; set; } = "Set new password";

    // private string OldPwd = string.Empty;
    private string PwdRepeat = string.Empty;
    private string Pwd = string.Empty;

    [Parameter]
    public EventCallback<AuthentificationFeedback> OnPasswordChangeClicked { get; set; }

    private void click()
    {
        AuthentificationFeedback fb = new AuthentificationFeedback();

        try
        {
            if (string.IsNullOrEmpty(Pwd))
            {
                fb.Message = "Password is empty";
            }
            if (string.IsNullOrEmpty(PwdRepeat))
            {
                fb.Message = "Repeat Password is empty";
            }

            fb.OldPassword = "not checked in this useable component";
            fb.RepeatPassword = PwdRepeat;
            fb.Password = Pwd;

            if (!string.IsNullOrEmpty(PwdRepeat) &&
                !string.IsNullOrEmpty(Pwd))
            {
                fb.Status = "OK";
            }
        }
        catch (Exception ex)
        {
            fb.Message = "Error: " + ex.Message;
        }
        finally
        {
            OnPasswordChangeClicked.InvokeAsync(fb);
        }
    }

}
