@using System.Linq
@using System.Text.Json;
@inject IJSRuntime JS
@implements IDisposable

<div class="container-fluid">
    <div class="card">

        @if (!string.IsNullOrEmpty(Title))
        {
            <div class="bg-light border-bottom p-3">
                <div class="row align-items-center">
                    <div class="col">
                        <div class="page-pretitle">
                            @BoardType.ToSecureString()
                        </div>
                        <h2 class="page-title">
                            @Title.ToSecureString()
                        </h2>
                    </div>

                    @if (RelatedContent != null)
                    {
                        <div class="col-auto ps-3">
                            @RelatedContent
                        </div>
                    }
                </div>
            </div>
        }

        <div class="card-body">
            <div class="row">
                <div class="col-auto p-3" style="width:50px;"></div>
                @foreach (IDTO column in Columns)
                {
                    <div class="col p-3 bg-light border-bottom">
                        <strong class="text-muted">@column.Title.ToSecureString()</strong>
                    </div>
                }
            </div>

            <div class="row">
                <div class="col-auto p-3 bg-light border-end" style="width:50px;">
                    <strong class="text-muted verticalText">Kanban</strong>
                </div>

                @foreach (IDTO column in Columns)
                {
                    <div data-column="@column.Title.ToSecureString()" data-row="Kanban"
                         class="mhpx-150 col border-end border-bottom p-3 @dropableContainerClass">

                        @foreach (IDTO dto in Items)
                        {
                            @if (dto.GetProperty("Column").Value == column.Title)
                            {
                                @if (dto.GetProperty("Row").Value == "Kanban")
                                {
                                    <FlexItem DTO="@dto" DragableItemClass="@draggableItemClass"
                                              RowItemType="Category" ColumnItemType="Status"
                                              BoardType="Backlog" Row="Kanban" Column="@column.Title" />
                                }
                            }
                        }
                    </div>
                }
            </div>
        </div>
        <div class="card-footer">

        </div>
    </div>
</div>


@code {

    // Objects
    private Lazy<Task<IJSObjectReference>> module;
    private DotNetObjectReference<Kanban>? objRef;

    // Areas
    [Parameter]
    public RenderFragment RelatedContent { get; set; }

    // Fields
    string draggableItemClass = "dragglableItem";
    string dropableContainerClass = "dropableContainer";

    // Properties
    [Parameter]
    public string Title { get; set; } = "Product";

    [Parameter]
    public string BoardType { get; set; } = "Kanban";

    [Parameter]
    public List<IDTO> Columns { get; set; } = new List<IDTO>();

    [Parameter]
    public List<IDTO> Rows { get; set; } = new List<IDTO>();

    [Parameter]
    public List<IDTO> Items { get; set; } = new List<IDTO>();


    // CTR
    protected override void OnInitialized()
    {
        base.OnInitialized();

        Init();
    }

    // Methods
    public void Init()
    {
        // Import JS File
        module = new(() => JS.InvokeAsync<IJSObjectReference>("import", "./_content/ELEMENTS.Controls/DragDrop.js").AsTask());
    }
    public async ValueTask Assign()
    {
        // Reference
        objRef = DotNetObjectReference.Create(this);

        // Execute function
        if (module != null)
        {
            var refMethod = await module.Value;
            await refMethod.InvokeVoidAsync("assignMultipleSortableJS",
                dropableContainerClass, draggableItemClass, objRef);
        }
    }

    // JS Methods
    [JSInvokable]
    public async void OnSortOrderChanged(JsonElement json)
    {
        try
        {
            // string div = json.GetProperty("DIV").GetString();
            await SortOrderChanged.InvokeAsync("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }

    }

    [JSInvokable]
    public async void OnItemAdded(JsonElement json)
    {
        try
        {
            // string div = json.GetProperty("DIV").GetString();
            await ItemAdded.InvokeAsync("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [JSInvokable]
    public async void OnItemChanged(JsonElement json)
    {
        try
        {
            // string div = json.GetProperty("DIV").GetString();
            await ItemChanged.InvokeAsync("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [JSInvokable]
    public async void OnDragEnd(JsonElement json)
    {
        try
        {
            // string div = json.GetProperty("DIV").GetString();
            await DragEnd.InvokeAsync("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [JSInvokable]
    public async void OnItemRemoved(JsonElement json)
    {
        try
        {
            // string div = json.GetProperty("DIV").GetString();
            await ItemRemoved.InvokeAsync("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    // Callback
    [Parameter]
    public EventCallback<string> ItemChanged { get; set; }

    [Parameter]
    public EventCallback<string> ItemAdded { get; set; }

    [Parameter]
    public EventCallback<string> SortOrderChanged { get; set; }

    [Parameter]
    public EventCallback<string> DragEnd { get; set; }

    [Parameter]
    public EventCallback<string> ItemRemoved { get; set; }

    // Events
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        try
        {
            // assign dragdrop
            await Assign();
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    // Dispose
    public async ValueTask DisposeAsync()
    {
        try
        {
            if (module.IsValueCreated)
            {
                var dispo = await module.Value;
                await dispo.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    public void Dispose()
    {
        try
        {
            if (module.IsValueCreated)
            {
                var dispo = module.Value;
                dispo.Dispose();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

}
