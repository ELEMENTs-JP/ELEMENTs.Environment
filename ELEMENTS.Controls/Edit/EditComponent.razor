
<label class="form-label">@Field.Title </label>


@* MODE *@

@if (Field.Mode == EditFieldMode.NULL)
{
    <div class="bg-white border rounded lead">&minus;</div>
}
else if (Field.Mode == EditFieldMode.Hidden)
{
    <div class="bg-light border rounded lead">&minus;</div>
}
else if (Field.Mode == EditFieldMode.View)
{
    <div class="row g-0">
        <div class="col">
            <p class="lead">@Value.ToSecureString()</p>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="Edit">
                <i class="fas fa-edit"></i>
            </button>
        </div>

    </div>
}
else if (Field.Mode == EditFieldMode.Edit)
{
    @if (Field.Type == EditFieldType.Text)
    {
        <p class="lead">@Value.ToSecureString()</p>
    }

    @if (Field.Type == EditFieldType.TextBox)
    {
        <div class="row gx-1">
            <div class="col">
                <input type="text"
                       @bind-value="Value"
                       class="@ControlCSS"
                       placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { TextValueChanged(); })" />
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-sm btn-outline-light" @onclick="Save">
                    <i class="fas fa-check"></i>
                </button>
            </div>
        </div>
    }

    @if (Field.Type == EditFieldType.TextArea)
    {
        <div class="row g-0">
            <div class="col">

                <textarea style="min-height:120px;"
                          class="@ControlCSS"
                          placeholder="@Placeholder"
                          @oninput="@(e => { Value = e.Value.ToSecureString(); TextValueChanged(); })"
                          rows="6">@Value</textarea>

            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-sm" @onclick="Save">
                    <i class="fas fa-check"></i>
                </button>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(Field.Description))
    {
        <p class="lead"><small class="text-muted">@Field.Description.ToSecureString()</small></p>
    }
}
 


@code {

    /// <summary>
    /// Defines or sets a CSS class that controls the CSS style of the control. The default value is: 'form-control'
    /// </summary>
    [Parameter]
    public string ControlCSS { get; set; } = "form-control";

    /// <summary>
    /// Defines or sets the Placeholder text of the Placeholder property of the control.
    /// The property is initialized with "string.Empty".
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public EditField Field { get; set; }

    /// <summary>
    /// Reacts when the Value property of the control is changed.
    /// Returns the value of the control as a string.
    /// If the Value property is NULL, the event is not thrown.
    /// Info: If intensive operations or accesses to the hardware are implemented with this event,
    /// delays may occur due to the roundtrip in the user interface.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnTextValueChanged { get; set; }
    private async void TextValueChanged()
    {
        try
        {
            await OnTextValueChanged.InvokeAsync(this.Value.ToSecureString());
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [Parameter]
    public IEditItemRepository EditRepository { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (EditRepository != null)
        {
            if (EditRepository.IsInitialized == true)
            {
                if (EditRepository.DTO != null)
                {
                    if (Field.Property == "Title")
                    {
                        this.Value = EditRepository.DTO.Title.ToSecureString();
                    }
                    else if (Field.Property == "ID")
                    {
                        this.Value = EditRepository.DTO.ID.ToSecureString();
                    }
                    else
                    {
                        this.Value = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureString();
                    }
                }
            }
        }

        await base.OnParametersSetAsync();
    }

    private async Task Edit()
    {
        Field.Mode = EditFieldMode.Edit;

        await Task.FromResult<string>("OK");
    }

    private async Task Save()
    {
        if (EditRepository != null)
        {
            if (EditRepository.IsInitialized == true)
            {
                if (EditRepository.DTO != null)
                {
                    if (Field.Property == "Title")
                    {
                        EditRepository.DTO.Title = this.Value;
                    }
                    else if (Field.Property == "ID")
                    {
                        EditRepository.DTO.ID = this.Value;
                    }
                    else
                    {
                        EditRepository.DTO.SetProperty(this.Value.ToSecureString(), Field.Property);
                    }

                    IFactoryStatusInfo info = EditRepository.Service.Factory.Update(EditRepository.DTO);
                    if (info.Status == "OK")
                    {
                        string msg = "everthing is ok";
                        Console.WriteLine(msg);
                    }
                    else
                    {
                        string msg = "nothing changed";
                        Console.WriteLine(msg);
                    }
                }
            }
            else
            {
                Console.WriteLine("Edit Repository is not initialized");
            }
        }

        Field.Mode = EditFieldMode.View;

        await Task.FromResult<string>("OK");
    }

}
