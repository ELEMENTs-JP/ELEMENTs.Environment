@using System.Globalization
@inject ISecurityService sec


<div class="@( (Border) ?
               ((Field.Type == EditFieldType.Divider) ? "p-1" : "p-1")
               : "" )">


    @if (Field.Type == EditFieldType.Divider)
    {
    }
    else
    {
        <label class="form-label text-primary">@Field.Title.ToSecureString()</label>
    }

    @* --- VIEW --- *@
    @if (Field.Mode == EditFieldMode.View)
    {
        <div class="@( (IsJustViewableType(Field.Type)) ? " row g-0 " : " row g-0 pointer hover")"
         @onclick="@( e => { if (!IsJustViewableType(Field.Type)) { Edit(); } })">

            <div class="col py-1">

                @if (Field.Type == EditFieldType.Divider)
                {
                    <div class="hr-text text-primary">@Field.Title.ToSecureString()</div>
                }

                @if (Field.Type == EditFieldType.Text ||
               Field.Type == EditFieldType.TextBox ||
               Field.Type == EditFieldType.TextArea ||
               Field.Type == EditFieldType.OptionItems ||
               Field.Type == EditFieldType.LookupItems)
                {
                    <div class="min-edit-height text-muted">
                        @Value.ToSecureString("bearbeiten...")
                    </div>
                }

                @if (Field.Type == EditFieldType.Status ||
               Field.Type == EditFieldType.Priority)
                {
                    <div class="row min-edit-height">
                        <div class="col">
                            <span class="badge bg-secondary">
                                @Value.ToSecureString("---")
                            </span>
                        </div>
                    </div>
                }

                @if (Field.Type == EditFieldType.MoneyBox)
                {

                    <div class="row min-edit-height">
                        <div class="col-auto text-muted">
                            @DecValue.ToSecureDecimal().ToString("C", new CultureInfo("de-DE")).ToSecureString("---")
                        </div>
                        <div class="col-auto ps-2 me-auto">
                            <i class="fas fa-money-bill"></i>
                        </div>
                    </div>


                }

                @if (Field.Type == EditFieldType.DecimalBox)
                {
                    <div class="min-edit-height text-muted">
                        @DecValue.ToSecureString("---")
                    </div>
                }

                @if (Field.Type == EditFieldType.IntegerBox)
                {

                    <div class="min-edit-height text-muted">
                        @IntValue.ToSecureString("---")
                    </div>
                }

                @if (Field.Type == EditFieldType.PercentBox ||
               Field.Type == EditFieldType.ProgressBox)
                {
                    <div class="row g-0 min-edit-height align-items-center">
                        <div class="col-auto text-muted">
                            @IntValue.ToSecureString()%
                        </div>
                        <div class="col-auto ps-2">
                            <div class="progress" style="width: 5rem">
                                <div class="progress-bar"
                                     style="width: @IntValue.ToSecureString()%"
                                     role="progressbar"
                                     aria-valuenow="@IntValue.ToSecureString()"
                                     aria-valuemin="0"
                                     aria-valuemax="100"
                                     aria-label="@IntValue.ToSecureString()% Complete">
                                    <span class="visually-hidden">@IntValue.ToSecureString()% Complete</span>
                                </div>
                            </div>
                        </div>
                        <div class="col"></div>
                    </div>
                }

                @if (Field.Type == EditFieldType.DateBox)
                {

                    <div class="row g-0 min-edit-edit align-items-center">
                        <div class="col-auto pe-2"><i class="far fa-calendar-alt"></i></div>
                        <div class="col text-muted">@DateTimeValue.ToSecureDateTime().ToShortDateString().ToSecureString("---")</div>
                    </div>

                }
                @if (Field.Type == EditFieldType.DateTimeBox)
                {

                    <div class="row g-0 min-edit-edit align-items-center">
                        <div class="col-auto pe-2"><i class="far fa-calendar-alt"></i></div>
                        <div class="col text-muted">
                            @(DateTimeValue.ToSecureDateTime().ToShortDateString().ToSecureString("---"))
                        </div>

                        <div class="col-auto px-2"><i class="far fa-clock"></i></div>
                        <div class="col text-muted">
                            @(DateTimeValue.ToSecureDateTime().ToShortTimeString().ToSecureString("---"))
                        </div>
                    </div>

                }
                @if (Field.Type == EditFieldType.TimeBox)
                {

                    <div class="row g-0 min-edit-edit align-items-center">
                        <div class="col-auto pe-2"><i class="far fa-clock"></i></div>
                        <div class="col text-muted">@DateTimeValue.ToSecureDateTime().ToShortTimeString().ToSecureString("---")</div>
                    </div>

                }

                @if (Field.Type == EditFieldType.CheckBox ||
               Field.Type == EditFieldType.ToggleSwitch)
                {
                    <div class="row g-0 min-edit-edit align-items-center">
                        <div class="col">
                            @if (BoolValue.ToSecureBool() == true)
                            {
                                <span class="badge bg-green">aktiv</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">inaktiv</span>
                            }
                        </div>
                    </div>
                }

            </div>

            @*@if (Field.Type != EditFieldType.Text)
        {
        <div class="col-auto">
        <button type="button" class="btn btn-sm" @onclick="Edit">
        <i class="fas fa-edit"></i>
        </button>
        </div>
        }*@

        </div>
    }

    @* --- EDIT --- *@
    else if (Field.Mode == EditFieldMode.Edit)
    {
        @if (Field.Type == EditFieldType.Divider)
        {
            <div class="hr-text">@Field.Title.ToSecureString()</div>
        }

        @if (Field.Type == EditFieldType.Text)
        {
            <p class="lead">@Value.ToSecureString()</p>
        }

        @if (Field.Type == EditFieldType.TextBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <input type="text"
                       @bind-value="Value"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(); })" />

                        <button type="button" class="btn btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.TextArea)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col-12">

                    <textarea style="min-height:120px;"
                              class="@ControlCSS"
                              placeholder="@Placeholder"
                      @oninput="@(e => { Value = e.Value.ToSecureString(); ValueChanged(); })"
                              rows="6">@Value</textarea>

                </div>
                <div class="col"></div>
                <div class="col-auto pt-1">
                    <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                        speichern...
                    </button>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.LookupItems)
        {
            <div class="row gx-1  d-flex align-items-center">
                <div class="col">

                    @* --- SELECT DROP DOWN --- *@
                    <select class="form-select" title="@( Value.ToSecureString() )"
                    @onchange="@(e => { Value = e.Value.ToSecureString(); ValueChanged(); })">

                        <option class="@OptionItemCSS" value="---">--- bitte wählen ---</option>

                        @if (Items.Count >= 1)
                        {
                            @foreach (IDTO item in Items)
                            {
                                @if (this.Value.ToSecureString() == item.Title.ToSecureString())
                                {
                                    item.Checked = true;
                                }

                                @if (item.Checked)
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()" selected>@item.Title.ToSecureString()</option>
                                }
                                else
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()">@item.Title.ToSecureString()</option>
                                }
                            }
                        }
                    </select>

                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.PersonPicker)
        {
            <div class="row gx-1  d-flex align-items-center">
                <div class="col">

                    @* --- SELECT DROP DOWN --- *@
                    <select class="form-select" title="@( Value.ToSecureString() )"
                    @onchange="@(e => { Value = e.Value.ToSecureString(); ValueChanged(); })">

                        <option class="@OptionItemCSS" value="---">--- bitte wählen ---</option>

                        @if (Items.Count >= 1)
                        {
                            @foreach (IDTO item in Items)
                            {
                                @if (this.Value.ToSecureString() == item.Title.ToSecureString())
                                {
                                    item.Checked = true;
                                }

                                @if (item.Checked)
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()" selected>@item.Title.ToSecureString()</option>
                                }
                                else
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()">@item.Title.ToSecureString()</option>
                                }
                            }
                        }
                    </select>

                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.Status)
        {
            <div class="row gx-1  d-flex align-items-center">
                <div class="col">

                    @* --- SELECT DROP DOWN --- *@
                    <select class="form-select" title="@( Value.ToSecureString() )"
                    @onchange="@(e => { Value = e.Value.ToSecureString(); ValueChanged(); })">

                        <option class="@OptionItemCSS" value="---">--- bitte wählen ---</option>

                        @if (Items.Count >= 1)
                        {
                            @foreach (IDTO item in Items)
                            {
                                @if (this.Value.ToSecureString() == item.Title.ToSecureString())
                                {
                                    item.Checked = true;
                                }

                                @if (item.Checked)
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()" selected>@item.Title.ToSecureString()</option>
                                }
                                else
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()">@item.Title.ToSecureString()</option>
                                }
                            }
                        }
                    </select>

                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.Priority)
        {
            <div class="row gx-1  d-flex align-items-center">
                <div class="col">

                    @* --- SELECT DROP DOWN --- *@
                    <select class="form-select" title="@( Value.ToSecureString() )"
                    @onchange="@(e => { Value = e.Value.ToSecureString(); ValueChanged(); })">

                        <option class="@OptionItemCSS" value="---">--- bitte wählen ---</option>

                        @if (Items.Count >= 1)
                        {
                            @foreach (IDTO item in Items)
                            {
                                @if (this.Value.ToSecureString() == item.Title.ToSecureString())
                                {
                                    item.Checked = true;
                                }

                                @if (item.Checked)
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()" selected>@item.Title.ToSecureString()</option>
                                }
                                else
                                {
                                    <option class="@OptionItemCSS" value="@item.Title.ToSecureString()">@item.Title.ToSecureString()</option>
                                }
                            }
                        }
                    </select>

                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                        <i class="fas fa-check"></i>
                    </button>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.MoneyBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">

                        <input type="number" step="0.01"
                       @bind-value="DecValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        @if (!string.IsNullOrEmpty(Symbol))
                        {
                            <span class="input-group-text">
                                @((MarkupString)Symbol)
                            </span>
                        }
                        <button type="button" class="btn btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>


        }

        @if (Field.Type == EditFieldType.DecimalBox)
        {

            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <input type="number" step="0.01"
                       @bind-value="DecValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />
                        <button type="button" class="btn btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>

        }

        @if (Field.Type == EditFieldType.IntegerBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <input type="number"
                       @bind-value="IntValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.PercentBox)
        {

            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">

                        <input type="number"
                       @bind-value="IntValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        @if (!string.IsNullOrEmpty(Symbol))
                        {
                            <span class="input-group-text">
                                <i class="fas fa-percent"></i>
                            </span>
                        }

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.ProgressBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">

                        <input type="number" min="0" max="100"
                       @bind-value="IntValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        @if (!string.IsNullOrEmpty(Symbol))
                        {
                            <span class="input-group-text">
                                <i class="fas fa-percent"></i>
                            </span>
                        }

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.DateBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <input type="date"
                       @bind-value="DateTimeValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>



        }

        @if (Field.Type == EditFieldType.DateTimeBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <input type="datetime-local"
                       @bind-value="DateTimeValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>

        }

        @if (Field.Type == EditFieldType.TimeBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <input type="time"
                       @bind-value="DateTimeValue"
                               class="@ControlCSS"
                               placeholder="@Placeholder"
                       @bind-value:event="oninput"
                       @onchange="@( e => { ValueChanged(e.Value); })" />

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>


        }

        @if (Field.Type == EditFieldType.CheckBox)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <CheckBox Title="@Field.Title.ToSecureString()"
                          Description="@Field.Description.ToSecureString()"
                          Value="@BoolValue"
                          ValueChanged="@( e => { BoolValue = e; })" />

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>
        }

        @if (Field.Type == EditFieldType.ToggleSwitch)
        {
            <div class="row gx-1 d-flex align-items-center">
                <div class="col">
                    <div class="input-group">
                        <Switch Title="@Field.Title.ToSecureString()"
                        Description="@Field.Description.ToSecureString()"
                        Value="@BoolValue"
                        ValueChanged="@( e => { BoolValue = e; })" />

                        <button type="button" class="btn btn-sm btn-ghost-success" @onclick="Save">
                            <i class="fas fa-check"></i>
                        </button>
                    </div>
                </div>
            </div>
        }




        @if (!string.IsNullOrEmpty(Field.Description))
        {
            <div><small class="text-muted">@Field.Description.ToSecureString()</small></div>
        }
    }

    @* other *@
    else
    {
        <div class="bg-light border rounded lead">&minus;</div>
    }
</div>


@code {

    [Parameter]
    public bool Border { get; set; } = false;

    /// <summary>
    /// Defines or sets a CSS class that controls the CSS style of the control. The default value is: 'form-control'
    /// </summary>
    [Parameter]
    public string ControlCSS { get; set; } = "form-control";

    /// <summary>
    /// Defines or sets a CSS class that controls the CSS style of the control. The default value is: form-control
    /// </summary>
    [Parameter]
    public string OptionItemCSS { get; set; } = "dropdown-item";

    /// <summary>
    /// Defines or sets the Placeholder text of the Placeholder property of the control.
    /// The property is initialized with "string.Empty".
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public int IntValue { get; set; } = 0;

    [Parameter]
    public decimal DecValue { get; set; } = 0;

    [Parameter]
    public bool BoolValue { get; set; } = false;

    [Parameter]
    public DateTime DateTimeValue { get; set; } = DateTime.Now;

    [Parameter]
    public List<IDTO> Items { get; set; } = new List<IDTO>();

    [Parameter]
    public EditField Field { get; set; }

    /// <summary>
    /// Reacts when the Value property of the control is changed.
    /// Returns the value of the control as a string.
    /// If the Value property is NULL, the event is not thrown.
    /// Info: If intensive operations or accesses to the hardware are implemented with this event,
    /// delays may occur due to the roundtrip in the user interface.
    /// </summary>
    [Parameter]
    public EventCallback<string> OnTextValueChanged { get; set; }
    private async void ValueChanged()
    {
        try
        {
            await OnTextValueChanged.InvokeAsync(this.Value.ToSecureString());
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }
    private async void ValueChanged(object value)
    {
        try
        {
            switch (Field.Type)
            {
                case EditFieldType.Text:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }
                case EditFieldType.TextArea:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }
                case EditFieldType.MoneyBox:
                    {
                        this.DecValue = value.ToSecureDecimal();
                        break;
                    }
                case EditFieldType.DecimalBox:
                    {
                        this.DecValue = value.ToSecureDecimal();
                        break;
                    }
                case EditFieldType.IntegerBox:
                    {
                        this.IntValue = value.ToSecureInt();
                        break;
                    }
                case EditFieldType.PercentBox:
                    {
                        this.IntValue = value.ToSecureInt();
                        break;
                    }
                case EditFieldType.ProgressBox:
                    {
                        this.IntValue = value.ToSecureInt();
                        break;
                    }

                case EditFieldType.DateBox:
                    {
                        this.DateTimeValue = value.ToSecureDateTime();
                        break;
                    }
                case EditFieldType.DateTimeBox:
                    {
                        this.DateTimeValue = value.ToSecureDateTime();
                        break;
                    }
                case EditFieldType.TimeBox:
                    {
                        this.DateTimeValue = value.ToSecureDateTime();
                        break;
                    }
                case EditFieldType.Status:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }
                case EditFieldType.Priority:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }
                case EditFieldType.LookupItems:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }
                case EditFieldType.PersonPicker:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }

                default:
                    {
                        this.Value = value.ToSecureString();
                        break;
                    }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }

        try
        {
            await OnTextValueChanged.InvokeAsync(value.ToSecureString());
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [Parameter]
    public EventCallback<string> OnPropertySaved { get; set; }
    private async void PropertySaved()
    {
        try
        {
            await OnPropertySaved.InvokeAsync("Property: " + this.Field.Title);
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    [Parameter]
    public IEditItemRepository EditRepository { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        try
        {
            if (EditRepository != null)
            {
                if (EditRepository.IsInitialized == true)
                {
                    if (EditRepository.DTO != null)
                    {
                        if (Field.Property == "Title")
                        {
                            this.Value = EditRepository.DTO.Title.ToSecureString();
                        }
                        else if (Field.Property == "ID")
                        {
                            this.Value = EditRepository.DTO.ID.ToSecureString();
                        }
                        else if (Field.Property == "Content")
                        {
                            this.Value = EditRepository.DTO.Content.ToSecureString();
                        }
                        else
                        {
                            try
                            {
                                // Text // TextArea
                                if (Field.Type == EditFieldType.Text ||
                                    Field.Type == EditFieldType.TextBox ||
                                    Field.Type == EditFieldType.TextArea)
                                {
                                    this.Value = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureString();
                                }

                                // Drop Down Items List
                                if (Field.Type == EditFieldType.LookupItems ||
                                    Field.Type == EditFieldType.Status ||
                                    Field.Type == EditFieldType.Priority)
                                {
                                    this.Value = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureString();

                                    LoadItems();
                                }

                                // Person Picker 
                                if (Field.Type == EditFieldType.PersonPicker)
                                {
                                    this.Value = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureString();

                                    LoadPeople();
                                }

                                // Money // Decimal
                                if (Field.Type == EditFieldType.MoneyBox ||
                                    Field.Type == EditFieldType.DecimalBox)
                                {
                                    this.DecValue = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureDecimal();
                                }

                                // Int
                                if (Field.Type == EditFieldType.IntegerBox ||
                                    Field.Type == EditFieldType.ProgressBox ||
                                    Field.Type == EditFieldType.PercentBox)
                                {
                                    this.IntValue = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureInt();
                                }

                                // Date, Time, DateTime
                                if (Field.Type == EditFieldType.DateBox ||
                                    Field.Type == EditFieldType.TimeBox ||
                                    Field.Type == EditFieldType.DateTimeBox)
                                {
                                    this.DateTimeValue = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureDateTime();
                                }

                                // Boolean // Checkbox
                                if (Field.Type == EditFieldType.CheckBox)
                                {
                                    this.BoolValue = EditRepository.DTO.GetProperty(Field.Property).Value.ToSecureBool();
                                }

                            }
                            catch (Exception ex)
                            {
                                System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Fehler: " + ex.Message);
        }
    }

    private async Task Edit()
    {
        Field.Mode = EditFieldMode.Edit;

        await Task.FromResult<string>("OK");
    }

    private async Task Save()
    {
        try
        {
            if (EditRepository != null)
            {
                if (EditRepository.IsInitialized == true)
                {
                    if (EditRepository.DTO != null)
                    {
                        if (Field.Property == "Title")
                        {
                            EditRepository.DTO.Title = this.Value;
                        }
                        else if (Field.Property == "ID")
                        {
                            EditRepository.DTO.ID = this.Value;
                        }
                        else if (Field.Property == "Content")
                        {
                            EditRepository.DTO.Content = this.Value;
                        }
                        else
                        {
                            try
                            {
                                // Text // TextArea
                                if (Field.Type == EditFieldType.TextBox ||
                                    Field.Type == EditFieldType.TextArea ||
                                    Field.Type == EditFieldType.LookupItems)
                                {
                                    EditRepository.DTO.SetProperty(this.Value.ToSecureString(), Field.Property);
                                }

                                // Money // Decimal
                                if (Field.Type == EditFieldType.MoneyBox ||
                                    Field.Type == EditFieldType.DecimalBox)
                                {
                                    EditRepository.DTO.SetProperty(this.DecValue.ToSecureString(), Field.Property);
                                }

                                // Int // Percent
                                if (Field.Type == EditFieldType.IntegerBox ||
                                    Field.Type == EditFieldType.ProgressBox ||
                                    Field.Type == EditFieldType.PercentBox)
                                {
                                    EditRepository.DTO.SetProperty(this.IntValue.ToSecureString(), Field.Property);
                                }

                                // Date, Time, DateTime
                                if (Field.Type == EditFieldType.DateBox ||
                                    Field.Type == EditFieldType.TimeBox ||
                                    Field.Type == EditFieldType.DateTimeBox)
                                {
                                    EditRepository.DTO.SetProperty(this.DateTimeValue.ToSecureString(), Field.Property);
                                }

                                // Boolean // CheckBox
                                if (Field.Type == EditFieldType.CheckBox ||
                                Field.Type == EditFieldType.ToggleSwitch)
                                {
                                    EditRepository.DTO.SetProperty(this.BoolValue.ToSecureString(), Field.Property);
                                }

                                // Status / Priority 
                                if (Field.Type == EditFieldType.Status ||
                                    Field.Type == EditFieldType.Priority)
                                {
                                    EditRepository.DTO.SetProperty(this.Value.ToSecureString(), Field.Property);
                                }

                                // People 
                                if (Field.Type == EditFieldType.PersonPicker)
                                {
                                    EditRepository.DTO.SetProperty(this.Value.ToSecureString(), Field.Property);
                                }
                            }
                            catch (Exception ex)
                            {
                                System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
                            }
                        }

                        IFactoryStatusInfo info = EditRepository.Service.Factory.Update(EditRepository.DTO);
                        if (info.Status == "OK")
                        {
                            string msg = "Property saved successfully";
                            System.Diagnostics.Debug.WriteLine(msg);
                        }
                        else
                        {
                            string msg = "nothing changed";
                            System.Diagnostics.Debug.WriteLine(msg);
                        }

                        try
                        {
                            // Event Callback
                            PropertySaved();

                            // Global Notification
                            InformationNotification n = new InformationNotification();
                            n.Event = "Update:Item";
                            n.Filter = this.Field.Property;
                            n.Title = this.Value.ToSecureString();
                            n.Information = "Property Changed";
                            sec.InfoNotifyService.Notify(n);

                            System.Diagnostics.Debug.WriteLine("Update:Item: " + " - Field: " + this.Field.Property + " - Value: " + this.Value.ToSecureString());
                        }
                        catch (Exception ex)
                        {
                            System.Diagnostics.Debug.WriteLine("Error: Update:Item: "
                            + " - Field: " + this.Field.Property + " - Value: " + this.Value.ToSecureString() + " "
                            + ex.Message.ToSecureString());
                        }
                    }
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Edit Repository is not initialized");
                }
            }

            // Set Field Modeo to -> VIEW
            Field.Mode = EditFieldMode.View;
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Fehler: " + ex.Message);
        }

        await Task.FromResult<string>("OK");
    }

    private void LoadItems()
    {
        try
        {
            // Generic LookUp
            if (Field.Type == EditFieldType.LookupItems ||
                Field.Type == EditFieldType.Priority ||
                Field.Type == EditFieldType.Status)
            {
                if (this.Field.ItemType != null)
                {
                    Items = EditRepository.ItemsByItemType(
                        this.Field.ItemType, this.Field.FilterProperty, this.Field.FilterValue);

                    System.Diagnostics.Debug.WriteLine("Lookup Items loaded: Count: " + Items.Count.ToSecureString());
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("ItemType is null in Drop Down Items Loading");
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Fehler: " + ex.Message);
        }
    }

    private void LoadPeople()
    {
        try
        {
            // Generic LookUp
            if (Field.Type == EditFieldType.PersonPicker)
            {
                if (this.Field.ItemType != null)
                {
                    Items = EditRepository.ItemsByItemType("User", "", "");

                    System.Diagnostics.Debug.WriteLine("People Items loaded: Count: " + Items.Count.ToSecureString());
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("ItemType is null in Drop Down Items Loading");
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("Fehler: " + ex.Message);
        }
    }

    private bool IsJustViewableType(EditFieldType type)
    {
        switch (type)
        {
            case EditFieldType.Text:
                { return true; }
            case EditFieldType.Divider:
                { return true; }
            default:
                { return false; }

        }
    }

    [Parameter]
    public string Symbol { get; set; } = "<i class='fas fa-euro-sign'></i>";
}
