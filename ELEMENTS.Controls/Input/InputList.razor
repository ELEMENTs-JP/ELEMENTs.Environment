@inject NavigationManager nm
@inject IJSRuntime JS

<div id="@("Input_List_" + ControlID.ToSecureString() + "_ID")"
     class="border rounded p-1" style="position:relative;">

    <div class="row g-0 d-flex align-items-center">

        @if (Elements.Count >= 1)
        {
            <div class="col-auto">

                @foreach (var item in Elements)
                {
                    <div class="badge bg-blue me-2 my-1">
                        <div class="row">
                            <div class="col-auto">
                                <strong>@item.Title.ToSecureString()</strong>
                            </div>
                            <div class="col-auto border-start">
                                <i class="fas fa-times pointer" @onclick="@( e => { Remove(item.Title); })"></i>
                            </div>
                        </div>
                    </div>
                }

            </div>
        }

        <div class="@( (Elements.Count >= 1) ? "col-auto border-start px-2" : "col-auto px-2" )">
            <input type="text"
                   class="@ControlCSS"
                   placeholder="@Placeholder"
                   @oninput="@( e => { Value = e.Value.ToSecureString(); onValueInput(e.Value.ToSecureString()); })"
                   @onchange="@( e => { Value = e.Value.ToSecureString(); onValueChanged(e.Value.ToSecureString()); })">

        </div>
        <div class="col">

        </div>
    </div>

    @if (IsListOpen)
    {
        <div class="@ListCSS"
             style="position: absolute;
                    inset: 0px auto auto 0px;
                    margin: 0px;
                    transform: translate(0px, 40px);
                    min-width: 300px;">
            @if (Items != null)
            {
                @if (Items.Count >= 1)
                {
                    <div class="border-top">

                        @foreach (IDTO item in Items)
                        {
                            <div class="@ItemCSS">
                                <div class="col" style="cursor:pointer;"
                                     @onclick="@( e => { Inject(item.Title); } )">

                                    @if (ShowID)
                                    {
                                        <small class="text-muted d-block">@item.ID.ToSecureString()</small>
                                    }

                                    <strong class="d-block text-truncate fw-bold text-dark">@item.Title.ToSecureString()</strong>

                                    @if (ShowContent)
                                    {
                                        <small class="d-block text-truncate">@item.Content.ToSecureString()</small>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    }
</div>




@code {

    Guid ControlID { get; set; } = Guid.NewGuid();

    // Fields
    bool IsListOpen { get; set; } = false;

    // Box
    /// <summary>
    /// Defines or sets a CSS class that controls the CSS style of the control. The default value is: form-control
    /// </summary>
    [Parameter]
    public string ControlCSS { get; set; } = "form-control form-control-sm form-control-flush form-inline border-start";

    /// <summary>
    /// Defines or sets the Placeholder text of the Placeholder property of the control.
    /// The property is initialized with "string.Empty".
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = "Suche...";

    /// <summary>
    /// Reacts when the Value property of the control is changed by keyboard input.
    /// Returns the value of the control as a string. If this is not NULL.
    /// If the Value property is NULL, the event is not thrown.
    /// Info: If intensive operations or accesses to the hardware are implemented with this event,
    /// delays may occur due to the roundtrip in the user interface.
    /// </summary>
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    private async void onValueChanged(string value)
    {
        // Raise Event
        await ValueChanged.InvokeAsync(value);

        // Show List
        IsListOpen = (Items.Count >= 1) ? true : false;
    }

    [Parameter]
    public EventCallback<string> ValueInput { get; set; }
    private async void onValueInput(string value)
    {
        // Raise Event
        await ValueInput.InvokeAsync(value);

        // Show List
        IsListOpen = (Items.Count >= 1) ? true : false;
    }

    [Parameter]
    public IList<IDTO> Elements { get; set; } = new List<IDTO>();

    // Style
    [Parameter]
    public string ListCSS { get; set; } = "bg-white overflow-hidden dropdown-menu show";

    [Parameter]
    public string ItemCSS { get; set; } = "row border-bottom p-2 overflow-hidden";

    [Parameter]
    public IList<IDTO> Items { get; set; } = new List<IDTO>();

    [Parameter] public bool ShowID { get; set; } = false;
    [Parameter] public bool ShowContent { get; set; } = true;

    [Parameter]
    public string Value { get; set; } = string.Empty;

    // Methods
    private async Task Inject(string ID)
    {
        try
        {
            var item = Elements.Where(se => se.Title == ID).FirstOrDefault();
            if (item == null)
            {
                Elements.Add(Items.Where(se => se.Title == ID).FirstOrDefault());

                // Clear
                onValueInput(string.Empty);
                onValueChanged(string.Empty);
            }

            await Task.FromResult<string>("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }
    private async Task Remove(string ID)
    {
        try
        {
            Elements.Remove(Elements.Where(se => se.Title == ID).FirstOrDefault());

            // Clear
            onValueInput(string.Empty);
            onValueChanged(string.Empty);

            await Task.FromResult<string>("OK");
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }
}
