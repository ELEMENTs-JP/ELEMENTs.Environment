@using Microsoft.JSInterop
@inject IJSRuntime JS
@implements IDisposable


<div class="input-group">
    <input type="text"
           @bind-value="Value"
           class="@ControlCSS"
           placeholder="@Placeholder"
           @bind-value:event="oninput"
           @onchange="@( e => { onValueChanged(); })" />

    @if (!string.IsNullOrEmpty(Symbol))
    {
        <span class="input-group-text"
              style="cursor:pointer;"
              @onclick="NavigateToLink">
            @((MarkupString)Symbol)
        </span>
    }
</div>


@code {


    /// <summary>
    /// Defines or sets a HTML mail symbol
    /// </summary>
    [Parameter]
    public string Symbol { get; set; } = "<i class='fas fa-external-link-alt'></i>";

    private async Task NavigateToLink()
    {
        try
        {
            if (!string.IsNullOrEmpty(Value))
            {
                if (_jsModule != null)
                {
                    await _jsModule.InvokeVoidAsync("navigateToLink", Value);
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    IJSObjectReference _jsModule;

    /// <summary>
    /// Defines or sets a CSS class that controls the CSS style of the control. The default value is: form-control
    /// </summary>
    [Parameter]
    public string ControlCSS { get; set; } = "form-control";

    /// <summary>
    /// Defines or sets the value of the Value property of the control.
    /// The property is initialized with "string.Empty".
    /// </summary>
    [Parameter]
    public string Value { get; set; } = string.Empty;

    /// <summary>
    /// Defines or sets the Placeholder text of the Placeholder property of the control.
    /// The property is initialized with "string.Empty".
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    /// Reacts when the Value property of the control is changed by keyboard input.
    /// Returns the value of the control as a string. If this is not NULL.
    /// If the Value property is NULL, the event is not thrown.
    /// Info: If intensive operations or accesses to the hardware are implemented with this event,
    /// delays may occur due to the roundtrip in the user interface.
    /// </summary>
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    private async void onValueChanged()
    {
        try
        {
            await ValueChanged.InvokeAsync(this.Value);
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the JS file
            string theJSFile = "./_content/ELEMENTS.Controls/hyperlink.js";
            _jsModule = await JS.InvokeAsync<IJSObjectReference>("import", theJSFile);
        }
    }

    public void Dispose()
    {
        try
        {
            if (_jsModule != null)
            {
                _jsModule.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            string msg = ex.Message;
        }
    }

}
