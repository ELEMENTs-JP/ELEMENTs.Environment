@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env


<InputFile OnChange="@LoadFiles"
           class="@ControlCSS" style="@ControlStyle" />

@if (isLoading)
{
    <div class="@ProgressCSS" title="@(Progress + "% Complete")">
        <div class="@ProgressLineCSS" style="width: @(Progress + "%")" role="progressbar"
             aria-valuenow="@Progress" aria-valuemin="0" aria-valuemax="100">
        </div>
    </div>
}

@code {

    private long defaultFileSizeInBytes = 1024 * 1024 * 100;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    //private decimal progressPercent;
    private string defaultFilePath = "FILES";

    [Parameter]
    public EventCallback<FileNotification> OnFileUploaded { get; set; }

    [Parameter]
    public string ControlCSS { get; set; } = "form-control";

    [Parameter]
    public string ProgressCSS { get; set; } = "progress mt-1";

    [Parameter]
    public string ProgressLineCSS { get; set; } = "progress-bar";

    [Parameter]
    public int Progress { get; set; } = 0;

    [Parameter]
    public string ControlStyle { get; set; } = "height: 36px !important;";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        Progress = 0;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                // Dateigröße
                if (file.Size >= defaultFileSizeInBytes)
                    return;

                string contentRootPath = env.ContentRootPath;

                Guid itemGUID = Guid.NewGuid();
                string relativeSaveFilePath =
                    contentRootPath.ToString() + "\\" +
                    defaultFilePath.ToString();

                // Verzeichnis
                if (!Directory.Exists(relativeSaveFilePath))
                {
                    Directory.CreateDirectory(relativeSaveFilePath);
                }
                if (!Directory.Exists(relativeSaveFilePath))
                    return;

                // Voller Dateipfad
                var extension = Helper.SplitGetLast(file.Name);
                var fullFilePath = Path.Combine(relativeSaveFilePath, itemGUID.ToString() + "." + extension);

                await using FileStream writeStream = new(fullFilePath, FileMode.Create);
                using var readStream = file.OpenReadStream(defaultFileSizeInBytes);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[1024 * 10];

                // https://docs.microsoft.com/de-de/aspnet/core/blazor/file-uploads?view=aspnetcore-6.0&pivots=server
                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                {
                    totalRead += bytesRead;

                    await writeStream.WriteAsync(buffer, 0, bytesRead);

                    decimal val = Decimal.Divide(totalRead, file.Size);
                    val = val * 100;
                    Progress = val.ToSecureInt();

                    System.Diagnostics.Debug.WriteLine("Progress: " + Progress.ToSecureString());
                    StateHasChanged();
                }

                // Notification
                FileNotification token = new FileNotification();
                token.FileGUID = itemGUID;
                token.FullFilePath = fullFilePath;
                token.OriginalFileName = file.Name;
                await OnFileUploaded.InvokeAsync(token);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
            }
        }

        isLoading = false;
    }
}