@using ELEMENTS.Data.SQLite


@if (Column != null)
{
    @if (DTO != null)
    {
        <div class="@ColumnCSS">

            @if (Column.Property == "ID")
            {
                @DTO.ID.ToSecureString()
            }
            else if (Column.Property == "Title")
            {
                @if (Column.Type == ColumnType.Text)
                {
                    @DTO.Title.ToSecureString()
                }
                else if (Column.Type == ColumnType.Link)
                {
                    <a class="fw-bold text-dark"
       href="@( "/Item/" + DTO.ItemType.ToSecureString() + "/" + DTO.GUID.ToSecureString() )">
                        @DTO.Title.ToSecureString()
                    </a>
                }
                else
                {
                    @DTO.Title.ToSecureString()
                }
            }
            else
            {
                @if (Column.Type == ColumnType.Text)
                {
                    @Value.ToSecureString()
                }
                else if (Column.Type == ColumnType.Percent)
                {
                    <div class="row g-0">
                        <div class="col-auto">
                            @Value.ToSecureString()
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-percent"></i>
                        </div>
                        <div class="col"></div>
                    </div>
                }
                else if (Column.Type == ColumnType.Money)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureDecimal().ToSecureString()
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-money-bill"></i>
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Integer)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureString()
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Decimal)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureDecimal().ToSecureString()
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Date)
                {
                    <div class="row g-0">
                        <div class="col-auto pe-1">
                            <i class="far fa-calendar-alt"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortDateString()
                        </div>

                    </div>
                }
                else if (Column.Type == ColumnType.DateTime)
                {
                    <div class="row g-0">
                        <div class="col-auto pe-1">
                            <i class="far fa-calendar-alt"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortDateString()
                        </div>
                        <div class="col-auto pe-1">
                            <i class="far fa-clock"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortTimeString()
                        </div>

                    </div>
                }
                else if (Column.Type == ColumnType.Time)
                {
                    <div class="row g-0">
                        <div class="col-auto pe-1">
                            <i class="far fa-clock"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortTimeString();
                        </div>

                    </div>
                }
                else if (Column.Type == ColumnType.UserImage)
                {
                    <div class="@UserImageCSS"
         style="@( UserImageStyle + " background-image: linear-gradient(rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), url(" + Base64String + "); " )">
                    </div>
                }
                else if (Column.Type == ColumnType.Parents)
                {
                    <div class="badge bg-secondary">
                        @Value.ToSecureString()
                    </div>
                }
                else if (Column.Type == ColumnType.Children)
                {
                    <div class="badge bg-secondary">
                        @Value.ToSecureString()
                    </div>
                }
                else if (Column.Type == ColumnType.Progress)
                {
                    <div class="row g-0">
                        <div class="col px-1" title="@("Progress: " + Value.ToSecureString() + " %")">

                            <div class="progress">
                                <div class="progress-bar" style="@("width: " + Value.ToSecureString() + "%")"
                                         role="progressbar" aria-valuenow="@(Value.ToSecureString())" aria-valuemin="0" aria-valuemax="100"
                                         aria-label="@(Value.ToSecureString() + "% Complete")">
                                    <span class="visually-hidden">@(Value.ToSecureString() + "% Complete")</span>
                                </div>
                            </div>

                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Parents)
                {
                    @if (RelatedDTO != null)
                    {
                        <div class="row g-0 align-items-center">
                            <div class="col">
                                <span class="badge bg-secondary">
                                    <a href="@( "/Item/" + RelatedDTO.ItemType.ToSecureString() + "/" + RelatedDTO.GUID.ToSecureString() )">
                                        @Value.ToSecureString()
                                    </a>
                                </span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row g-0 align-items-center">
                            <div class="col">---</div>
                        </div>
                    }

                }
                else if (Column.Type == ColumnType.Children)
                {
                    @if (RelatedDTO != null)
                    {
                        <div class="row g-0 align-items-center">
                            <div class="col">
                                <span class="badge bg-secondary">
                                    <a href="@( "/Item/" + RelatedDTO.ItemType.ToSecureString() + "/" + RelatedDTO.GUID.ToSecureString() )">
                                        @Value.ToSecureString()
                                    </a>
                                </span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row g-0 align-items-center">
                            <div class="col">---</div>
                        </div>
                    }

                }
                else if (Column.Type == ColumnType.Priority)
                {
                    <div class="row g-0">
                        <div class="col">
                            <span class="badge bg-secondary">
                                @Value.ToSecureString("---")
                            </span>
                        </div>
                    </div>
                 
                }
                else if (Column.Type == ColumnType.Status)
                {
                    <div class="row g-0">
                        <div class="col">
                            <span class="badge bg-secondary">
                                @Value.ToSecureString("---")
                            </span>
                        </div>
                    </div>
                }
                else
                {
                    @Value.ToSecureString()
                }
            }

        </div>
    }
}

@code {

    // Image
    private string Base64String { get; set; }

    [Parameter]
    public ISqlDatabaseService SqlService { get; set; }

    [Parameter]
    public string ColumnCSS { get; set; } = "col"; // list-group-flush

    [Parameter]
    public string UserImageCSS { get; set; } = "avatar shadow";

    [Parameter]
    public string UserImageStyle { get; set; } = "height: 44px; width: 44px; margin-top:-7px; margin-top:-7px; border-radius:22px; border:3px solid #fff;";

    [Parameter]
    public IColumn Column { get; set; }

    [Parameter]
    public IDTO DTO { get; set; }

    private IDTO RelatedDTO { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public int IntValue { get; set; } = 0;

    [Parameter]
    public decimal DecValue { get; set; } = 0;

    [Parameter]
    public DateTime DateTimeValue { get; set; } = DateTime.Now;

    [Parameter]
    public string RelatedItemType { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        try
        {
            if (Column != null)
            {
                if (DTO != null)
                {
                    this.Value = DTO.GetProperty(Column.Property).Value.ToSecureString();
                }

                if (Column.Type == ColumnType.UserImage)
                {
                    LoadUserImage();
                }
                if (Column.Type == ColumnType.Parents)
                {
                    LoadParents();
                }
                if (Column.Type == ColumnType.Children)
                {
                    LoadChildren();
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }

        base.OnParametersSet();
    }

    private async Task LoadUserImage()
    {
        try
        {
            if (DTO != null)
            {
                if (SqlService != null)
                {
                    Base64String = DTO.GetUserProfileImage(SqlService);
                    this.StateHasChanged();
                    await Task.FromResult<string>("OK");
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }
    }

    private async Task LoadParents()
    {
        try
        {
            if (SqlService == null)
            {
                Value = "---";
                await Task.FromResult<string>("SQL Service = NULL");
                return;
            }

            if (string.IsNullOrEmpty(RelatedItemType))
            {
                Value = "---";
                await Task.FromResult<string>("SQL Service = NULL");
                return;
            }

            RelatedDTO = null;

            if (DTO != null)
            {
                // Prepare
                IQueryParameter qp = QueryParameter.DefaultItemsQuery(
                    SqlService.Factory.MasterGUID, SqlService.Factory.MasterAppType,
                    RelatedItemType, QueryType.ParentsByChild);
                qp.PageSize = 1;
                qp.CurrentPage = 1;

                // Parent Child GUID
                qp.ParentGUID = DTO.GUID;
                qp.ChildGUID = DTO.GUID;

                // Query
                RelatedDTO = SqlService.Factory.GetItems(qp).FirstOrDefault();

                if (RelatedDTO != null)
                {
                    Value = RelatedDTO.Title.ToSecureString();
                }
                else
                {
                    Value = "---";
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }

        await Task.FromResult<string>("OK");
    }
    private async Task LoadChildren()
    {
        try
        {
            if (SqlService == null)
            {
                Value = "---";
                await Task.FromResult<string>("SQL Service = NULL");
                return;
            }

            if (string.IsNullOrEmpty(RelatedItemType))
            {
                Value = "---";
                await Task.FromResult<string>("SQL Service = NULL");
                return;
            }

            RelatedDTO = null;

            if (DTO != null)
            {
                // Prepare
                IQueryParameter qp = QueryParameter.DefaultItemsQuery(
                    SqlService.Factory.MasterGUID, SqlService.Factory.MasterAppType,
                    RelatedItemType, QueryType.ChildrenByParent);
                qp.PageSize = 1;
                qp.CurrentPage = 1;

                // Parent Child GUID
                qp.ParentGUID = DTO.GUID;
                qp.ChildGUID = DTO.GUID;

                // Query
                RelatedDTO = SqlService.Factory.GetItems(qp).FirstOrDefault();

                if (RelatedDTO != null)
                {
                    Value = RelatedDTO.Title.ToSecureString();
                }
                else
                {
                    Value = "---";
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }

        await Task.FromResult<string>("OK");
    }

}
