@using ELEMENTS.Data.SQLite


@if (Column != null)
{
    @if (DTO != null)
    {
        <div class="@ColumnCSS">

            @if (Column.Property == "ID")
            {
                @DTO.ID.ToSecureString()
            }
            else if (Column.Property == "Title")
            {
                @if (Column.Type == ColumnType.Text)
                {
                    @DTO.Title.ToSecureString()
                }
                else if (Column.Type == ColumnType.Link)
                {
                    <a class="fw-bold text-dark"
                       href="@( "/Item/" + DTO.ItemType.ToSecureString() + "/" + DTO.GUID.ToSecureString() )">
                        @DTO.Title.ToSecureString()
                    </a>
                }
                else
                {
                    @DTO.Title.ToSecureString()
                }
            }
            else
            {
                @if (Column.Type == ColumnType.Text)
                {
                    @Value.ToSecureString()
                }
                else if (Column.Type == ColumnType.Percent)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureString()
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-percent"></i>
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Money)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureDecimal().ToSecureString()
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-money-bill"></i>
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Integer)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureString()
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Decimal)
                {
                    <div class="row g-0">
                        <div class="col">
                            @Value.ToSecureDecimal().ToSecureString()
                        </div>
                    </div>
                }
                else if (Column.Type == ColumnType.Date)
                {
                    <div class="row g-0">
                        <div class="col-auto pe-1">
                            <i class="far fa-calendar-alt"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortDateString()
                        </div>

                    </div>
                }
                else if (Column.Type == ColumnType.DateTime)
                {
                    <div class="row g-0">
                        <div class="col-auto pe-1">
                            <i class="far fa-calendar-alt"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortDateString()
                        </div>
                        <div class="col-auto pe-1">
                            <i class="far fa-clock"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortTimeString()
                        </div>

                    </div>
                }
                else if (Column.Type == ColumnType.Time)
                {
                    <div class="row g-0">
                        <div class="col-auto pe-1">
                            <i class="far fa-clock"></i>
                        </div>
                        <div class="col">
                            @Value.ToSecureString().ToSecureDateTime().ToShortTimeString();
                        </div>

                    </div>
                }
                else if (Column.Type == ColumnType.UserImage)
                {
                    <div class="@UserImageCSS"
                         style="@( UserImageStyle + " background-image: linear-gradient(rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05)), url(" + Base64String + "); " )">
                    </div>
                }
                else if (Column.Type == ColumnType.Parents)
                {
                    <div class="badge bg-secondary">
                        @Value.ToSecureString()
                    </div>
                }
                else if (Column.Type == ColumnType.Children)
                {
                    <div class="badge bg-secondary">
                        @Value.ToSecureString()
                    </div>
                }
                else if (Column.Type == ColumnType.Progress)
                {
                    <div class="row g-0">
                        <div class="col">

                            <div class="progress">
                                <div class="progress-bar" style="@("width: "+Value.ToSecureString()+"%")" 
                                     role="progressbar" aria-valuenow="@(Value.ToSecureString())" aria-valuemin="0" aria-valuemax="100" 
                                     aria-label="@(Value.ToSecureString()+"% Complete")">
                                    <span class="visually-hidden">@(Value.ToSecureString()+"% Complete")</span>
                                </div>
                            </div>

                        </div>
                    </div>
                }
                else
                {
                    @Value.ToSecureString()
                }
            }

        </div>
    }
}

@code {

    // Image
    private string Base64String { get; set; }

    [Parameter]
    public ISqlDatabaseService SqlService { get; set; }

    [Parameter]
    public string ColumnCSS { get; set; } = "col"; // list-group-flush

    [Parameter]
    public string UserImageCSS { get; set; } = "avatar shadow";

    [Parameter]
    public string UserImageStyle { get; set; } = "height: 44px; width: 44px; margin-top:-7px; margin-top:-7px; border-radius:22px; border:3px solid #fff;";

    [Parameter]
    public IColumn Column { get; set; }

    [Parameter]
    public IDTO DTO { get; set; }

    [Parameter]
    public string Value { get; set; } = string.Empty;

    [Parameter]
    public int IntValue { get; set; } = 0;

    [Parameter]
    public decimal DecValue { get; set; } = 0;

    [Parameter]
    public DateTime DateTimeValue { get; set; } = DateTime.Now;

    protected override void OnParametersSet()
    {
        try
        {
            if (Column != null)
            {
                if (DTO != null)
                {
                    this.Value = DTO.GetProperty(Column.Property).Value.ToSecureString();
                }

                if (Column.Type == ColumnType.UserImage)
                {
                    LoadUserImage();
                }
                if (Column.Type == ColumnType.Parents)
                {
                    LoadPrents();
                }
                if (Column.Type == ColumnType.Children)
                {
                    LoadChildren();
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }

        base.OnParametersSet();
    }

    private async Task LoadUserImage()
    {
        try
        {
            if (SqlService == null)
            {
                await Task.FromResult<string>("OK");
                return;
            }

            if (DTO != null)
            {
                // Prepare
                IQueryParameter qp = QueryParameter.DefaultItemsQuery(
                    SqlService.Factory.MasterGUID, SqlService.Factory.MasterAppType,
                    "Image", QueryType.ChildrenByParent);
                qp.PageSize = 1;
                qp.CurrentPage = 1;

                // Parent Child GUID
                qp.AssociationType = "UserProfileImage";
                qp.ParentGUID = DTO.GUID;
                qp.ChildGUID = DTO.GUID;

                // Query
                IDTO Image = SqlService.Factory.GetItems(qp).FirstOrDefault();

                if (Image != null)
                {
                    string FilePath = Image.GetProperty("FilePath").Value.ToSecureString(); // .Replace(@"\", "/");

                    if (File.Exists(FilePath))
                    {
                        // Read
                        byte[] arr = File.ReadAllBytes(FilePath);
                        string base64String = Convert.ToBase64String(arr, 0, arr.Length);

                        Base64String = "data:" + ELEMENTS.Infrastructure.Helper.SplitGetLast(FilePath) + ";base64," + base64String;

                        await Task.FromResult<string>("OK");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }
    }

    private async Task LoadPrents()
    {
        try
        {
            if (SqlService == null)
            {
                await Task.FromResult<string>("SQL Service = NULL");
                return;
            }

            if (DTO != null)
            {
                // Prepare
                IQueryParameter qp = QueryParameter.DefaultItemsQuery(
                    SqlService.Factory.MasterGUID, SqlService.Factory.MasterAppType,
                    "Image", QueryType.ParentsByChild);
                qp.PageSize = 1;
                qp.CurrentPage = 1;

                // Parent Child GUID
                qp.ParentGUID = DTO.GUID;
                qp.ChildGUID = DTO.GUID;

                // Query
                IDTO Item = SqlService.Factory.GetItems(qp).FirstOrDefault();

                if (Item != null)
                {
                    Value = Item.Title.ToSecureString();
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }

        await Task.FromResult<string>("OK");
    }
    private async Task LoadChildren()
    {
        try
        {
            if (SqlService == null)
            {
                await Task.FromResult<string>("SQL Service = NULL");
                return;
            }

            if (DTO != null)
            {
                // Prepare
                IQueryParameter qp = QueryParameter.DefaultItemsQuery(
                    SqlService.Factory.MasterGUID, SqlService.Factory.MasterAppType,
                    "Image", QueryType.ChildrenByParent);
                qp.PageSize = 1;
                qp.CurrentPage = 1;

                // Parent Child GUID
                qp.ParentGUID = DTO.GUID;
                qp.ChildGUID = DTO.GUID;

                // Query
                IDTO Item = SqlService.Factory.GetItems(qp).FirstOrDefault();

                if (Item != null)
                {
                    Value = Item.Title.ToSecureString();
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine("FAIL: " + ex.Message);
        }

        await Task.FromResult<string>("OK");
    }
}
