@inject IJSRuntime JS
@using System.Linq

<ul class="pagination align-items-center justify-content-center">
    @foreach (LinkModel link in links)
    {
        <li style="cursor: pointer;" @onclick="@( e => { SelectedPageInternal(link); }  )"
            class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
            <span class="page-link">@link.Text</span>
        </li>
    }
</ul>


@code {
    List<LinkModel> links;

    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotaPageCount { get; set; } = 1;
    [Parameter] public int Radius { get; set; } = 3;

    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    protected override void OnParametersSet()
    {
        LoadPages();
    }

    void SelectedPageInternal(LinkModel link)
    {
        try
        {
            if (link.Page == CurrentPage)
            {
                return;
            }

            if (!link.Enabled)
            {
                return;
            }

            CurrentPage = link.Page;
            SelectedPage.InvokeAsync(link.Page);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Fehler: " + ex.Message);
        }
    }

    private void LoadPages()
    {
        try
        {
            links = new List<LinkModel>();
            var isPreviousPageLinkEnabled = CurrentPage != 1;
            var previousPage = CurrentPage - 1;
            links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));

            for (int i = 1; i <= TotaPageCount; i++)
            {
                if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
                {
                    links.Add(new LinkModel(i) { Active = CurrentPage == i });
                }
            }

            var isNextPageLinkEnabled = CurrentPage != TotaPageCount;
            var nextPage = CurrentPage + 1;
            links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
        }
        catch (Exception ex)
        {
            Console.WriteLine("FAIL: " + ex.Message);
        }
    }

    class LinkModel
    {
        public LinkModel(int page)
            : this(page, true) { }

        public LinkModel(int page, bool enabled)
            : this(page, enabled, page.ToString())
        { }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }

}





