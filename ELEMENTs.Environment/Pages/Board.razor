@page "/Board"
@page "/Board/{View}"
@inject IJSRuntime JS


@if (string.IsNullOrEmpty(View))
{

}
else
{
    @if (View.ToLower().Contains("board"))
    {
        <ELEMENTS.Controls.Board.Board Columns="@Columns" Rows="@Rows" Items="@Items"
                                       ItemChanged="@( e => { Message = "Item Changed"; })"
                                       ItemAdded="@(e => { Message = "Item Added"; })"
                                       SortOrderChanged="@( e => { Message = "Sort Order Changed"; } )"
                                       ItemRemoved="@( e => { Message = "Item Removed"; })" />

        <div class="mt-3 mb-3"></div>
        <p>@Message</p>
    }

    @if (View.ToLower().Contains("backlog"))
    {
        <ELEMENTS.Controls.Board.Backlog Columns="@Columns" Rows="@Rows" Items="@Items"
                                         ItemChanged="@( e => { Message = "Item Changed"; })"
                                         ItemAdded="@(e => { Message = "Item Added"; })"
                                         SortOrderChanged="@( e => { Message = "Sort Order Changed"; })"
                                         ItemRemoved="@( e => { Message = "Item Removed"; })">
            <RelatedContent>
                <ELEMENTS.Controls.Popup.Modal Title="Add entry" OnOKClicked="@( e => { AddItem(EntryTitle, EntryTitle); })">

                    <div class="row">
                        <div class="col">
                            <label class="form-label"><strong>Title</strong></label>
                            <input type="text" class="form-control" @bind-value="@EntryTitle" />
                        </div>
                    </div>
                </ELEMENTS.Controls.Popup.Modal>
            </RelatedContent>
        </ELEMENTS.Controls.Board.Backlog>
    }

    @if (View.ToLower().Contains("kanban"))
    {
        <ELEMENTS.Controls.Board.Kanban Columns="@Columns" Rows="@Rows" Items="@Items"
                                         ItemChanged="@( e => { Message = "Item Changed"; })"
                                         ItemAdded="@(e => { Message = "Item Added"; })"
                                         SortOrderChanged="@( e => { Message = "Sort Order Changed"; })"
                                         ItemRemoved="@( e => { Message = "Item Removed"; })">
            <RelatedContent>
                <ELEMENTS.Controls.Popup.Modal Title="Add entry" OnOKClicked="@( e => { AddItem(EntryTitle, EntryTitle); })">

                    <div class="row">
                        <div class="col">
                            <label class="form-label"><strong>Title</strong></label>
                            <input type="text" class="form-control" @bind-value="@EntryTitle" />
                        </div>
                    </div>
                </ELEMENTS.Controls.Popup.Modal>
            </RelatedContent>
        </ELEMENTS.Controls.Board.Kanban>
    }
}


@code
{
    [Parameter]
    public string View { get; set; } = string.Empty;

    string Message = string.Empty;
    string EntryTitle = string.Empty;

    List<IDTO> Columns { get; set; } = new List<IDTO>();
    List<IDTO> Rows { get; set; } = new List<IDTO>();
    List<IDTO> Items { get; set; } = new List<IDTO>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Columns.Add(new DTO() { ID = "1", Title = "in Refinement" });
        Columns.Add(new DTO() { ID = "2", Title = "in Development" });
        Columns.Add(new DTO() { ID = "3", Title = "in Test" });
        Columns.Add(new DTO() { ID = "4", Title = "done" });

        Rows.Add(new DTO() { ID = "1", Title = "Critical" });
        Rows.Add(new DTO() { ID = "2", Title = "Regular" });

        if (View.ToLower().Contains("kanban"))
        {
            AddKanbanItems();
        }
        else
        {
            AddDefaultItems();
        }
    }
    private void AddKanbanItems()
    {
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Refinement", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Development", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Test", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Refinement", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Development", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Test", Name = "Column" }, }
        });
    }

    private void AddDefaultItems()
    {
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Critical", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Refinement", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Critical", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Development", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Regular", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Test", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Critical", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Refinement", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Critical", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Development", Name = "Column" }, }
        });
        Items.Add(new DTO()
        {
            GUID = Guid.NewGuid(),
            MasterGUID = Guid.NewGuid(),
            Title = "Title",
            Content = "Content",
            Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Regular", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Test", Name = "Column" }, }
        });
    }
    private void AddItem(string title, string content)
    {
        if (View.ToLower().Contains("kanban"))
        {
            Items.Add(new DTO()
            {
                GUID = Guid.NewGuid(),
                MasterGUID = Guid.NewGuid(),
                Title = title,
                Content = content,
                Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Kanban", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Refinement", Name = "Column" }, }
            });
        }
        else
        {
            Items.Add(new DTO()
            {
                GUID = Guid.NewGuid(),
                MasterGUID = Guid.NewGuid(),
                Title = title,
                Content = content,
                Properties = new List<IProperty>() { new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "Regular", Name = "Row" },
                new PropertyDTO() { GUID = Guid.NewGuid(), MasterGUID = Guid.NewGuid(), Value = "in Test", Name = "Column" }, }
            });
        }



        EntryTitle = string.Empty;
    }
}
