@page "/list"
@inject ISQLiteService sql
@using ELEMENTS.Infrastructure

<ELEMENTS.Controls.Layouts.ContainerLayout Title="Items List" SubTitle="ItemType" 
                                           BackgroundCSS="bg-white" Border="true" Rounded="true" PaddingCSS="px-3 py-2" MenuCSS="bg-light border-bottom">
    <MenuContent>
        <div class="row d-flex align-items-center">
            <div class="col">
            </div>
            <div class="col">
                <ELEMENTS.Controls.Search.SearchBox ValueInput="@( e => { Matchcode = e; SearchItems(); } )" />
                @*<ELEMENTS.Controls.Input.TextBox ValueChanged="@( e => { Matchcode = e; SearchItems(); } )" />*@
            </div>
            <div class="col">
               
            </div>
        </div>
    </MenuContent>
    <RelatedContent>
        <ELEMENTS.Controls.Collection.AddItem Title="Eintrag hinzufügen"
                                              FieldHeader="Bezeichnung" 
                                              Repository="@AddRepo" 
                                              OnOKClicked="LoadItems" />
    </RelatedContent>
    <ChildContent>
        <ELEMENTS.Controls.Collection.ItemsCollection Items="ItemsRepo.Items" Context="IDTO" ControlCSS="" BodyCSS="">
            <RowTemplate>
                <div class="@( "p-2 border-bottom " + "" )">
                    <a href="@( "/edit/" + IDTO.ItemType.ToSecureString() + "/" + IDTO.GUID.ToSecureString() )">
                        <div class="row">
                            <div class="col-auto">@IDTO.ID.ToSecureString()</div>
                            <div class="col">@IDTO.Title.ToSecureString()</div>
                        </div>
                    </a>
                </div>
            </RowTemplate>
        </ELEMENTS.Controls.Collection.ItemsCollection>
    </ChildContent>
    <FooterContent>
        <div class="row d-flex align-items-center">
            <div class="col-auto">
                @if (ItemCount != 0)
                { 
                    <small class="text-muted text-start"><i class="fas fa-hashtag"></i><strong class="ms-1">@ItemCount</strong></small>
                }
            </div>
            <div class="col">
                <ELEMENTS.Controls.List.Pagination CurrentPage="@CurrentPage" TotaPageCount="@TotalPageCount" 
                                                   SelectedPage="@( e => { CurrentPage = e; LoadItems(); } )" />
            </div>
            <div class="col-auto">
                <small class="text-muted text-end"><i class="fas fa-hashtag"></i><strong class="ms-1">@PageSize</strong></small>
            </div>
        </div>
    </FooterContent>
</ELEMENTS.Controls.Layouts.ContainerLayout>

@code {

    private int ItemCount = 0;
    public int CurrentPage { get; set; } = 1;
    public int TotalPageCount { get; set; } = 1;
    public int PageSize { get; set; } = 10;
    public string Matchcode { get; set; } = string.Empty;

    private IAddItemRepository AddRepo = new AddItemRepository();
    private IItemsRepository ItemsRepo = new ItemsRepository();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (AddRepo != null)
        {
            AddRepo.Service = sql;
        }
        if (ItemsRepo != null)
        {
            ItemsRepo.Service = sql;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }


    protected override async Task OnParametersSetAsync()
    {
        LoadItems();
        await Task.FromResult<string>("OK");
    }

    private void SearchItems()
    {
        if (ItemsRepo != null)
        {
            ItemsRepo.CurrentPage = this.CurrentPage;
            ItemsRepo.PageSize = this.PageSize;
            ItemsRepo.Matchcode = this.Matchcode;
            ItemsRepo.Search();

            ItemCount = ItemsRepo.ItemCount();

            CalculatePaging();
        }
    }
    private void LoadItems()
    {
        if (ItemsRepo != null)
        {
            ItemsRepo.CurrentPage = this.CurrentPage;
            ItemsRepo.PageSize = this.PageSize;
            ItemsRepo.Load();

            ItemCount = ItemsRepo.ItemCount();

            CalculatePaging();
        }
    }
    private void CalculatePaging()
    {
        try
        {
            // Page Size 
            long rest = 0;
            long quotient = Math.DivRem(ItemCount, PageSize, out rest);
            TotalPageCount = Convert.ToInt32(quotient);
            TotalPageCount = (rest >= 1) ? TotalPageCount += 1 : TotalPageCount;
        }
        catch (Exception ex)
        {
            TotalPageCount = 1;
        }
    }
}
