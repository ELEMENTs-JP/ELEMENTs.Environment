@page "/view"


<div class="row">
    <div class="col">
        <h3 class="h1">Container and Views</h3>
    </div>
</div>


<div class="row">
    <div class="col p-3">




        <ELEMENTS.Controls.Navigation.WebsiteNavigation Entries="@( new List<NavigationEntry>
                        {
                            new NavigationEntry { Title = "HOME", Link = "/" },
                            new NavigationEntry { Title = "App", Link = "/App" },
                            new NavigationEntry { Title = "Website", Link = "/Website",
                                Items = new List<NavigationEntry>()
                                {
                                    new NavigationEntry() { Title = "HOME", Link = "/" },
                                    new NavigationEntry() { Title = "Website", Link = "/Website" },
                                    new NavigationEntry() { Title = "Empty Page", Link = "/EmptyPage" },
                                    new NavigationEntry() { Title = "Website Page", Link = "/WebsitePage" },
                                    new NavigationEntry() { Title = "App Page", Link = "/AppPageLayout" },
                                    new NavigationEntry() { Title = "List", Link = "/ListPage" },
                                    new NavigationEntry() { Title = "View", Link = "/ViewPage" },
                                    new NavigationEntry() { Title = "Print Preview", Link = "/PrintPreviewPage" },
                                    new NavigationEntry() { Title = "Dashboard", Link = "/DashboardPage" },
                                    new NavigationEntry() { Title = "App", Link = "/App" },
                                    new NavigationEntry() { Title = "License Manager", Link = "/LicenseManager" },
                                } },
                        } )" />




        <ELEMENTS.Controls.Navigation.AppNavigation Entries="@( new List<NavigationEntry>
                        {
                            new NavigationEntry { Title = "HOME", Link = "/" },

                            new NavigationEntry { Title = "Interface", Link = "/Interface",
                                Items= new List<NavigationEntry>()
                                {
                                    new NavigationEntry() { Title = "Empty Page", Link = "/EmptyPage" },
                                    new NavigationEntry() { Title = "Website Page", Link = "/WebsitePage" },
                                    new NavigationEntry() { Title = "Portfolio Page", Link = "/PortfolioPage" },
                                    new NavigationEntry() { Title = "Profile Page", Link = "/ProfilePage" },
                                    new NavigationEntry() { Title = "App Page", Link = "/AppPageLayout" },
                                    new NavigationEntry() { Title = "Category Page", Link = "/CategoryPage" },
                                    new NavigationEntry() { Title = "List", Link = "/ListPage" },
                                    new NavigationEntry() { Title = "View", Link = "/ViewPage" },
                                    new NavigationEntry() { Title = "Dashboard", Link = "/DashboardPage" },
                                    new NavigationEntry() { Title = "Report", Link = "/ReportPage" },
                                    new NavigationEntry() { Title = "Print Preview", Link = "/PrintPreviewPage" },
                                } },

                            new NavigationEntry { Title = "Form Elements", Link = "/FormElements" },
                            new NavigationEntry { Title = "Container", Link = "/ContainerElements" },
                            new NavigationEntry { Title = "Lists", Link = "/List" },
                            new NavigationEntry { Title = "Items", Link = "/Items" },
                            new NavigationEntry { Title = "Search", Link = "/Search" },
                            new NavigationEntry { Title = "KPI and Charts", Link = "/Financial" },
                            new NavigationEntry { Title = "Security", Link = "/Security" },
                            new NavigationEntry { Title = "Media", Link = "/Media" },
                            new NavigationEntry { Title = "Layout & Navigation", Link = "/Layout" },

                            new NavigationEntry { Title = "Scenarios", Link = "/Scenario",
                                Items= new List<NavigationEntry>()
                                {
                                    new NavigationEntry() { Title = "Stammdaten", Link = "/Scenario/Stammdaten" },
                                    new NavigationEntry() { Title = "Business Model", Link = "/Scenario/BusinessModel" },
                                    new NavigationEntry() { Title = "Strategyzer", Link = "/Scenario/Strategyzer" },
                                }
                            },

                            new NavigationEntry() { Title = "Layout: App", Link = "/App" },
                            new NavigationEntry() { Title = "Layout: Website", Link = "/Website" },

                            new NavigationEntry() { Title = "License Manager", Link = "/LicenseManager" },

                        } )" />







    </div>
    <div class="col p-3">

        <ELEMENTS.Controls.Text.Label Value="Control Container" />
        <ELEMENTS.Controls.Area.ControlContainer Title="Title">
            <h1>This is a child Control</h1>
        </ELEMENTS.Controls.Area.ControlContainer>

        <ELEMENTS.Controls.Text.Label Value="Menu Popup" />
        <ELEMENTS.Controls.Popup.MenuPopup />

        <ELEMENTS.Controls.Text.Label Value="Tab Control" />
        <ELEMENTS.Controls.Container.TabContainer>
            <ELEMENTS.Controls.Container.TabItem Text="Tab Item 1">
                <h1>This is the Content of Tab Item 1</h1>
            </ELEMENTS.Controls.Container.TabItem>
            <ELEMENTS.Controls.Container.TabItem Text="Tab Item 2">
                <h1>This is the Content of Tab Item 2</h1>

            </ELEMENTS.Controls.Container.TabItem>
        </ELEMENTS.Controls.Container.TabContainer>

        <ELEMENTS.Controls.Text.Label Value="Accordion" />
        <ELEMENTS.Controls.Container.Accordion>
            <ELEMENTS.Controls.Container.AccordionItem Title="ASDF">
                <h1>Inhalt 21</h1>
            </ELEMENTS.Controls.Container.AccordionItem>
            <ELEMENTS.Controls.Container.AccordionItem Title="QWER">
                <h1>Inhalt 23</h1>
            </ELEMENTS.Controls.Container.AccordionItem>
            <ELEMENTS.Controls.Container.AccordionItem Title="poiu">
                <h1>Inhalt 25</h1>
            </ELEMENTS.Controls.Container.AccordionItem>
            <ELEMENTS.Controls.Container.AccordionItem Title="ölkj">
                <h1>Inhalt 27</h1>
            </ELEMENTS.Controls.Container.AccordionItem>
        </ELEMENTS.Controls.Container.Accordion>


    </div>
    <div class="col p-3">

            <ELEMENTS.Controls.Text.Label Value="Card" />
        <ELEMENTS.Controls.Area.Card Title="Title" Text="this is the text of the card" SubTitle="Subtitle" />

        <ELEMENTS.Controls.Text.Label Value="Toast" />
        <ELEMENTS.Controls.Popup.Toast @ref="theTOAST" Title="Show Toast" />
        <button class="btn btn-secondary" @onclick="ShowToast">Show Toast</button>

        <ELEMENTS.Controls.Popup.Modal Title="Modal Dialog"
                                       OnCancelClicked="@( e => { Value = e.ToString(); })"
                                       OnOKClicked="@( e => { Value = e.ToString(); })">
            <h1>this is the content of the modal</h1>
        </ELEMENTS.Controls.Popup.Modal>

        <ELEMENTS.Controls.Text.Label Value="Component Container" />
        <ELEMENTS.Controls.Area.ComponentContainer>
            <Header>
                <h3>Header</h3>
            </Header>
            <ChildContent>
                <h1>This is a child Control</h1>
            </ChildContent>
            <Footer>
                <h4>Footer</h4>
            </Footer>
        </ELEMENTS.Controls.Area.ComponentContainer>

        <ELEMENTS.Controls.Text.Label Value="Popup" />
        <ELEMENTS.Controls.Popup.Popup />

        <ELEMENTS.Controls.Text.Label Value="Sidebar" />
        <button type="button" class="btn btn-sm btn-primary" @onclick="ShowSidebar">Partial Sidebar</button>
        <ELEMENTS.Controls.Container.Sidebar @ref="pSidebar"
                                             Position="ELEMENTS.Controls.Container.Sidebar.SideBarPosition.Partial">
            <h1>This is the content of the sidebar</h1>
        </ELEMENTS.Controls.Container.Sidebar>

        <button type="button" class="btn btn-sm btn-primary" @onclick="ShowSidebarLeft">Left Sidebar</button>
        <ELEMENTS.Controls.Container.Sidebar @ref="pSidebarLeft"
                                             Position="ELEMENTS.Controls.Container.Sidebar.SideBarPosition.Left">
            <h1>This is the content of the sidebar</h1>
        </ELEMENTS.Controls.Container.Sidebar>

        <button type="button" class="btn btn-sm btn-primary" @onclick="ShowSidebarTop">Top Sidebar</button>
        <ELEMENTS.Controls.Container.Sidebar @ref="pSidebarTop"
                                             Position="ELEMENTS.Controls.Container.Sidebar.SideBarPosition.Top">
            <h1>This is the content of the sidebar</h1>
        </ELEMENTS.Controls.Container.Sidebar>
    </div>
</div>








@code {
    private ELEMENTS.Controls.Popup.Toast theTOAST;
    private async Task ShowToast()
    {
        if (theTOAST != null)
        {
            await theTOAST.ShowToast("Hallo Welt", "this is a message");
        }
    }

    [Parameter]
    public string Value { get; set; } = "Inhalt...";


    private ELEMENTS.Controls.Container.Sidebar pSidebar;
    private async Task ShowSidebar()
    {
        if (pSidebar != null)
        {
            await pSidebar.Show();
        }
    }


    private ELEMENTS.Controls.Container.Sidebar pSidebarLeft;
    private async Task ShowSidebarLeft()
    {
        if (pSidebarLeft != null)
        {
            await pSidebarLeft.Show();
        }
    }


    private ELEMENTS.Controls.Container.Sidebar pSidebarTop;
    private async Task ShowSidebarTop()
    {
        if (pSidebarTop != null)
        {
            await pSidebarTop.Show();
        }
    }
}
